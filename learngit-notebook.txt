$ git config --global user.name "username"
$ git config --global user.email "email"
$ mkdir dirname
$ cd dirname 
$ pwd
$ git init
$ git add *.*
$ git add .
$ git commit -m "log words"
$ git status 
$ git diff *.*
$ git log 
$ git log --pretty=oneline --graph
$ cat *.*
$ git reset --hard HEAD^
$ git reset --hard HEAD^^
$ git reset --hard HEAD~100
$ git reset --hard daf9af3
$ git reflog
$ git checkout -- *.*	//让这个文件回到最近一次git commit或git add时的状态； git checkout其实是用版本库里的版本替换工作区的版本，无论工作区是修改还是删除，都可以“一键还原”。
$ git reset HEAD *.*	//暂存区的修改回退到工作区; HEAD表示最新的版本
$ rm *.* 				//删除某个文件
$ git rm *.*			//从版本库删除某个文件


/**
*Git-远程仓库
*
*/
$ git remote add origin git@github.com:zmayor/learnGit.git
$ git push -u master 
$ git push origin master 
$ git push origin dev

$ git checkout -b dev 	//创建并切换新分支
	equal {
		$ git branch dev
		$ git checkout dev //切换到dev分支
	}
$ git branch 			//查看当前分支
$ git merge dev 		//将指定分支合并到当前分支 Fast-forward
$ git branch -d dev		//删除dev分支

$ git stash				//把未提交的工作暂存起来
$ git stash apply		//恢复stash内容
$ git stash apply stash@{0} 	//恢复指定的stash
--> $git stash drop 	//删除stash存档
$ git stash pop 		//恢复内容并删除存档
$ git branch -D feature-1	//强行删除还未被合并的分支feature-1
$ git checkout -b dev origin/dev	//创建远程origin的dev分支到本地
$ git pull				//更新远程的内容到本地
$ git branch --set-upstream dev origin/dev	//指定本地dev分支与远程origin/dev分支的链接

$ git tag v1.3			//改当前分支添加标签
$ git tag v1.0 e3fa59	//改指定版本增加标签
$ git show v1.3			//展示 标签为 v1.3 的版本
$ git tag -a v0.1 -m "version 0.1 released" 35135462	//改指定版本添加带有说明文字的标签
$ git tag -d v1.3 		//删除标签
$ git push origin v1.0 	//推送某个标签到远程
$ git push origin --tags	//一次性推送全部尚未推送的本地标签
$ git config --global alias.st status	//为status设置别名st
git config --global alias.lg "log --color --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit"	//自定义git log